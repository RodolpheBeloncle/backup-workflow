{"createdAt":"2025-07-30T06:16:19.918Z","updatedAt":"2025-07-30T18:14:31.674Z","id":"F99O1Be8VRKlHFR5","name":"tunnel-pick-node-v1","active":false,"isArchived":false,"nodes":[{"parameters":{"workflowInputs":{"values":[{"name":"Node_Name"},{"name":"Execution_URL"}]}},"type":"n8n-nodes-base.executeWorkflowTrigger","typeVersion":1.1,"position":[-976,96],"id":"74586729-b1a2-4bbb-892e-0c657540a2f0","name":"Listener"},{"parameters":{"resource":"execution","operation":"get","executionId":"={{$json.Execution_Id}}","options":{"activeWorkflows":true},"requestOptions":{}},"type":"n8n-nodes-base.n8n","typeVersion":1,"position":[-544,96],"id":"0d35327b-ec17-4c87-9819-97bed4a5d21b","name":"Get an execution","notesInFlow":true,"credentials":{"n8nApi":{"id":"8NDl1mAtTpFgl0bf","name":"n8n account"}}},{"parameters":{"jsCode":"// ==========================\n// ✅ PARTIE 1 : Données du nœud ciblé par l’utilisateur\n// ==========================\nconst parentExec = items[0].json;\nconst targetNodeName = $('Centrage').item.json.Node_Name;\n\nif (!parentExec.data?.resultData?.runData[targetNodeName]) {\n  throw new Error(`❌ Le nœud \"${targetNodeName}\" n'existe pas dans le workflow parent`);\n}\n\nconst targetNodeData = parentExec.data.resultData.runData[targetNodeName][0].data;\nconst targetJson = targetNodeData.main?.[0]?.[0]?.json || {};\nconst targetBinaryRaw = targetNodeData.main?.[0]?.[0]?.binary || {};\n\n// ✅ Préfixer les binaires du nœud cible\nconst targetBinary = {};\nfor (const key in targetBinaryRaw) {\n  targetBinary[`Target_${key}`] = targetBinaryRaw[key];\n}\n\n// ==========================\n// ✅ PARTIE 2 : Trouver le dernier nœud exécuté (juste avant Execute Workflow)\n// ==========================\nconst lastNode = parentExec.data.resultData.lastNodeExecuted;\n\nif (!parentExec.data?.resultData?.runData[lastNode]) {\n  throw new Error(`❌ Impossible de trouver le nœud \"${lastNode}\" dans l'exécution parent`);\n}\n\nconst previousNodeName = lastNode;\n\nif (!previousNodeName) {\n  throw new Error(`❌ Impossible de déterminer le nœud précédent avant \"${lastNode}\"`);\n}\n\nconst unwantedNodes = ['When clicking \\'Execute workflow\\'', 'Webhook Trigger', 'Manual Trigger'];\nif (unwantedNodes.includes(previousNodeName)) {\n  throw new Error(`⚠️ Le nœud précédent est un trigger (${previousNodeName}) et n’a pas de données exploitables.`);\n}\n\n// 📥 Données JSON + Binary du nœud précédent\nconst parentNodeData = parentExec.data.resultData.runData[previousNodeName][0].data;\nconst parentJson = parentNodeData.main?.[0]?.[0]?.json || {};\nconst parentBinaryRaw = parentNodeData.main?.[0]?.[0]?.binary || {};\n\n// ✅ Préfixer les binaires du nœud précédent\nconst parentBinary = {};\nfor (const key in parentBinaryRaw) {\n  parentBinary[`Input_${key}`] = parentBinaryRaw[key];\n}\n\n// ==========================\n// ✅ PARTIE 3 : Fusionner et renvoyer tout\n// ==========================\nreturn [{\n  json: {\n    Input_Node_Name: previousNodeName,    // 🔹 Nom du nœud avant \"Execute Workflow\"\n    Input_Node_Json: parentJson,          // 🔹 JSON du nœud précédent\n    Target_Node_Name: targetNodeName,     // 🔹 Nom du nœud ciblé par l’utilisateur\n    Target_Node_Json: targetJson          // 🔹 JSON du nœud ciblé\n  },\n  binary: {\n    ...parentBinary,    // 📂 Binaires du nœud précédent (renommés Input_…)\n    ...targetBinary     // 📂 Binaires du nœud ciblé (renommés Target_…)\n  }\n}];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[128,112],"id":"925221fe-f1b9-4177-9e4c-daa420468b47","name":"Search Binary Node"},{"parameters":{"resource":"execution","operation":"get","executionId":"={{ $('Get an execution').first().json.data.parentExecution.executionId  }}","options":{"activeWorkflows":true},"requestOptions":{}},"type":"n8n-nodes-base.n8n","typeVersion":1,"position":[-96,-16],"id":"86a5b3c3-1a3f-4471-ad90-d1244a6869c8","name":"Get an execution parent","notesInFlow":true,"credentials":{"n8nApi":{"id":"8NDl1mAtTpFgl0bf","name":"n8n account"}}},{"parameters":{"assignments":{"assignments":[{"id":"23c6b225-cb7b-4981-ac1d-354157d24a40","name":"Execution_Id","value":"={{ $json.Execution_URL ? $json.Execution_URL.split('/').at(-1) : $execution.id }}","type":"string"},{"id":"32cc628d-5d6b-4334-bc70-f04edbacaa85","name":"Workflow_Id","value":"={{ $json.Execution_URL ? $json.Execution_URL.split('/').at(-2) : $workflow.id }}","type":"string"},{"id":"f89db063-edad-41c4-b8f1-cfe90dd3369d","name":"Execution_URL","value":"={{ $json.Execution_URL }}","type":"string"}]},"includeOtherFields":true,"include":"selected","includeFields":"Node_Name","options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-752,96],"id":"91641aa8-4348-4e51-aaf9-432759c26ebf","name":"Centrage","notesInFlow":true},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"4d4834e2-2d37-4cbb-8271-957c191e549c","leftValue":"={{ $('Centrage').first().json.Execution_URL?.length > 0 }}","rightValue":"","operator":{"type":"boolean","operation":"false","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-320,96],"id":"8487df39-5f95-4775-96bb-34d43f9e3343","name":"Appeler sans Execution URL ?"}],"connections":{"Listener":{"main":[[{"node":"Centrage","type":"main","index":0}]]},"Get an execution":{"main":[[{"node":"Appeler sans Execution URL ?","type":"main","index":0}]]},"Get an execution parent":{"main":[[{"node":"Search Binary Node","type":"main","index":0}]]},"Centrage":{"main":[[{"node":"Get an execution","type":"main","index":0}]]},"Appeler sans Execution URL ?":{"main":[[{"node":"Get an execution parent","type":"main","index":0}],[{"node":"Search Binary Node","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"1ec877f2-8ece-4726-9358-6ad92cd980f6","triggerCount":0,"shared":[{"createdAt":"2025-08-14T07:15:18.798Z","updatedAt":"2025-08-14T07:15:18.798Z","role":"workflow:owner","workflowId":"F99O1Be8VRKlHFR5","projectId":"TAg2OWp8a2XzOVPs"}],"tags":[]}