{"createdAt":"2025-09-25T14:50:10.223Z","updatedAt":"2025-10-22T12:50:20.136Z","id":"jgTHUPh2FXVgICkh","name":"pupetteer","active":false,"isArchived":false,"nodes":[{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[0,0],"id":"e8bacf88-142a-410d-be6b-cce5601df41b","name":"When clicking ‘Execute workflow’"},{"parameters":{"operation":"runCustomScript","scriptCode":"const inputData = $input.first().json || {};\nconst login = inputData.login || \"Biogaran\";\nconst password = inputData.password || \"biogaran\";\n\ntry {\n  console.log(\"Début du scraping...\");\n  \n  // Étape 1: Connexion\n  await $page.goto(\"https://www.tedispharma-ci.com\", { \n    waitUntil: 'networkidle2',\n    timeout: 30000 \n  });\n\n  // Vérifier si on est sur la page de login\n  await $page.waitForSelector('#loginForm', { timeout: 10000 });\n  \n  // Remplir le formulaire\n  await $page.type('#username', login);\n  await $page.type('#password', password);\n  \n  // Cliquer et attendre la navigation\n  await Promise.all([\n    $page.click('#btnSubmit'),\n    $page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 30000 })\n  ]);\n\n  console.log(\"Connexion réussie, récupération du CSV...\");\n\n  // Étape 2: Récupération CSV\n  const csvContent = await $page.evaluate(async () => {\n    const response = await fetch(\n      'https://www.tedispharma-ci.com/StatistiquePays?valeurProduit=0&valeurLaboratoire=0',\n      { credentials: 'include' }\n    );\n    if (!response.ok) throw new Error(`HTTP ${response.status}`);\n    return response.text();\n  });\n\n  console.log(\"CSV récupéré avec succès\");\n\n  // ⚡ FORMAT REQUIS PAR N8N : Tableau d'items\n  return [{\n    json: {\n      success: true,\n      csvContent: csvContent,\n      currentUrl: $page.url(),\n      message: \"Scraping terminé avec succès\",\n      timestamp: new Date().toISOString()\n    },\n    pairedItem: { item: 0 }\n  }];\n\n} catch (error) {\n  console.error(\"Erreur:\", error);\n  \n  // Capturer screenshot si possible\n  let screenshot = null;\n  try {\n    screenshot = await $page.screenshot({ encoding: 'base64' });\n  } catch (e) {\n    console.error(\"Impossible de capturer screenshot:\", e);\n  }\n\n  return [{\n    json: {\n      success: false,\n      error: error.message,\n      screenshot: screenshot,\n      currentUrl: $page.url() || 'Unknown',\n      timestamp: new Date().toISOString()\n    },\n    pairedItem: { item: 0 }\n  }];\n}","options":{"browserWSEndpoint":"","headless":false}},"type":"n8n-nodes-puppeteer.puppeteer","typeVersion":1,"position":[208,0],"id":"126cbbc3-6994-4149-967d-01c6ffad2291","name":"Puppeteer"}],"connections":{"When clicking ‘Execute workflow’":{"main":[[{"node":"Puppeteer","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"942c9109-e09f-4129-bbb5-9795cee7b170","triggerCount":0,"shared":[{"createdAt":"2025-09-25T14:50:10.223Z","updatedAt":"2025-09-25T14:50:10.223Z","role":"workflow:owner","workflowId":"jgTHUPh2FXVgICkh","projectId":"TAg2OWp8a2XzOVPs"}],"tags":[]}