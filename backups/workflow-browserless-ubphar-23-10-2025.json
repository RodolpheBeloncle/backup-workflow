{"createdAt":"2025-09-24T15:20:17.295Z","updatedAt":"2025-10-22T12:46:36.288Z","id":"22X0qrIq6dkQ4WZJ","name":"browserless-ubphar","active":false,"isArchived":false,"nodes":[{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[-400,64],"id":"fbebb40b-2a1a-4bde-a5a7-b8516306b4c7","name":"When clicking ‘Execute workflow’"},{"parameters":{"method":"POST","url":"https://production-sfo.browserless.io/function","sendQuery":true,"queryParameters":{"parameters":[{"name":"token"}]},"sendBody":true,"contentType":"raw","rawContentType":"application/javascript","body":"export default async ({ page, context }) => {\n  try {\n     const login = context?.login || \"BIOGARAN\";\n    const password = context?.password || \"BIOG*125\";\n\n    // Définir la résolution d'affichage\n    await page.setViewport({ width: 1920, height: 1080 });\n\n    // Étape 1 : Se rendre sur la page de login\n    await page.goto(\"https://www.ubphar.com/login/\", { \n      waitUntil: \"networkidle2\",\n      timeout: 30000 \n    });\n\n    // Remplissage du formulaire de connexion\n    await page.type('input[name=\"email\"]', login);\n    await page.type('input[name=\"password\"]', password);\n    \n    // Connexion et attente de la redirection\n    await Promise.all([\n      page.click('button[type=\"submit\"]'),\n      page.waitForNavigation({ \n        waitUntil: \"networkidle2\",\n        timeout: 30000 \n      })\n    ]);\n\n    // Étape 2 : Accéder à la page des statistiques\n    await page.goto(\"https://www.ubphar.com/vendor_stats/\", { \n      waitUntil: \"networkidle2\",\n      timeout: 30000 \n    });\n\n    // Attendre que le tableau soit disponible\n    await page.waitForSelector('table.vendor', { timeout: 15000 });\n\n    // Extraire le tableau et le convertir en JSON dynamique\n    const tableData = await page.evaluate(() => {\n      const table = document.querySelector(\"table.vendor\");\n      if (!table) return [];\n\n      // Récupérer les en-têtes\n      const headers = Array.from(table.querySelectorAll(\"thead tr td\"))\n        .map(h => h.innerText.trim())\n        .filter(Boolean);\n\n      // Récupérer les lignes du tbody\n      const rows = Array.from(table.querySelectorAll(\"tbody tr\"));\n\n      // Mapper chaque ligne en objet JSON\n      return rows.map(row => {\n        const cells = Array.from(row.querySelectorAll(\"td\"));\n        const rowData = {};\n\n        headers.forEach((header, i) => {\n          rowData[header] = cells[i]?.innerText.trim() || \"\";\n        });\n\n        return rowData;\n      });\n    });\n\n    // Retourner les données\n    return {\n      data: {\n        success: true,\n        message: \"Tableau converti en JSON dynamique avec succès\",\n        headers: tableData.length > 0 ? Object.keys(tableData[0]) : [],\n        rows: tableData,\n        currentUrl: page.url(),\n      },\n      type: \"application/json\",\n    };\n\n  } catch (err) {\n    // En cas d'erreur, on capture un screenshot encodé en base64\n    const errorScreenshot = await page.screenshot({ fullPage: true });\n    const errorScreenshotBase64 = errorScreenshot.toString(\"base64\");\n\n    return {\n      data: {\n        success: false,\n        error: err.message,\n        currentUrl: page.url(),\n        screenshot: errorScreenshotBase64,\n      },\n      type: \"application/json\",\n    };\n  }\n};","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-192,64],"id":"f705f453-886a-4a74-827c-c7ff8fd8e64c","name":"HTTP Request"}],"connections":{"When clicking ‘Execute workflow’":{"main":[[{"node":"HTTP Request","type":"main","index":0}]]},"HTTP Request":{"main":[[]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"b94f483f-33f0-4293-a6f4-c8b43855e11d","triggerCount":0,"shared":[{"createdAt":"2025-09-24T15:20:17.295Z","updatedAt":"2025-09-24T15:20:17.295Z","role":"workflow:owner","workflowId":"22X0qrIq6dkQ4WZJ","projectId":"TAg2OWp8a2XzOVPs"}],"tags":[]}